class Solution:

    def longestValidParentheses(self, s: str) -> int:
        n = len(s)
        longest = 0
        stack = []
        stackLen = 0
        countDict ={}
        cur = 0
        for brack in s:
            if len(stack)>0 and stack[len(stack)-1] == '(' and brack == ')':
                del(stack[-1])
                stackLen -= 1
                if cur > stackLen:
                    prev = countDict[cur]
                    countDict[cur] = 0
                    if stackLen in countDict:
                        countDict[stackLen] = countDict[stackLen] + prev + 2
                    else:
                        countDict[stackLen] = prev + 2
                else:
                    if stackLen in countDict:
                        countDict[stackLen] = countDict[stackLen] + 2
                    else:
                        countDict[stackLen] = 2
                cur = stackLen
            else:
                stack.append(brack)
                stackLen += 1
            for key in countDict:
                longest = max(longest, countDict[key])
        return longest
    
if __name__ == "__main__":
    sol = Solution()
    print(sol.longestValidParentheses(")()()("))
    #print(sol.longestValidParentheses("()()"))
    print(sol.longestValidParentheses("((())())(()))(()()(()(()))(()((((()))))))((()())()))()()(()(((((()()()())))()())(()()))((((((())))((()))()()))))(()))())))()))()())((()()))))(()(((((())))))()((()(()(())((((())(())((()()(()())))())(()(())()()))())(()()()))()(((()())(((()()())))(((()()()))(()()))()))()))))))())()()((()(())(()))()((()()()((())))()(((()())(()))())())))(((()))))())))()(())))()())))())()((()))((()))()))(((())((()()()(()((()((())))((()()))())(()()(()))))())((())))(()))()))))))()(()))())(()())))))(()))((())(()((())(((((()()()(()()())))(()())()((()(()()))(()(())((()((()))))))))(()(())()())()(()(()(()))()()()(()()())))(())(()((((()()))())))(())((()(())())))))())()()))(((())))())((()(()))(()()))((())(())))))(()(()((()((()()))))))(()()()(()()()(()(())()))()))(((()(())()())(()))())))(((()))())(()((()))(()((()()()(())()(()())()(())(()(()((((())()))(((()()(((()())(()()()(())()())())(()(()()((()))))()(()))))(((())))()()))(()))((()))))()()))))((((()(())()()()((()))((()))())())(()((()()())))))))()))(((()))))))(()())))(((()))((()))())))(((()(((())))())(()))))(((()(((((((((((((())(((()))((((())())()))())((((())(((())))())(((()))))()())()(())())(()))))()))()()()))(((((())()()((()))())(()))()()(()()))(())(()()))()))))(((())))))((()()(()()()()((())((((())())))))((((((()((()((())())(()((()))(()())())())(()(())(())(()((())((())))(())())))(()()())((((()))))((()(())(()(()())))))))))((()())()()))((()(((()((()))(((((()()()()()(()(()((()(()))(()(()((()()))))()(()()((((((()((()())()))((())()()(((((()(()))))()()((()())((()())()(())((()))()()(()))"))
