from typing import List
from functools import lru_cache
class Solution:
    def challengeOfTheKeeper(self, maze: List[str]) -> int:
        n, m = len(maze), len(maze[0])
        distance = [float("inf")] * (n*m)

        begin, end = (0, 0), (0, 0)
        for i in range(n):
            for j in range(m):
                if maze[i][j] == 'S':
                    begin = (i, j)
                if maze[i][j] == 'T':
                    end = (i, j)
        visited = set()
        
        todo = [(end[0], end[1], 0)]
        visited.add(end[0]*m+end[1])
        while todo:
            x, y, dist = todo.pop(0)
            distance[x*m+y] = dist
            for _x, _y in [(0,1),(0,-1),(-1,0),(1,0)]:
                if 0<=x+_x<n and 0<=y+_y<m and maze[x+_x][y+_y]!='#' \
                    and (x+_x)*m+y+_y not in visited:
                    visited.add((x+_x)*m+y+_y)
                    todo.append((x+_x, y+_y, dist+1))
        
        if distance[begin[0]*m+begin[1]] == float("inf"): return -1
        if distance[begin[0]*m+begin[1]] == 1: return 0
        
        def mirror_len(x, y):
            mirror = 0
            if maze[x][y] == '.' and maze[x][m-1-y] == '.':
                mirror = max(mirror, distance[x*m+m-y-1])
            if maze[x][y] == '.' and maze[n-x-1][y] == '.':
                mirror = max(mirror, distance[(n-x-1)*m+y])            
            return mirror

        tranfer = [float("inf")] * (n*m)
        todo = [(end[0], end[1], 0)]
        while todo:
            x, y, t_len = todo.pop(0)
            if t_len < tranfer[x*m+y]:
                tranfer[x*m+y] = t_len
                for _x, _y in [(0,1),(0,-1),(-1,0),(1,0)]:
                    if 0<=x+_x<n and 0<=y+_y<m and maze[x+_x][y+_y] in ['S', '.']:
                        todo.append((x+_x, y+_y, max(t_len, mirror_len(x+_x, y+_y))))

        # ans = dfs2(begin[0], begin[1])
        ans = tranfer[begin[0]*m + begin[1]]
        # ans = min(ans1, ans2)
        return -1 if ans == float("inf") else ans


if __name__ == "__main__":
    sol = Solution()
    maze = [".....","##S..","...#.","T.#..","###.."]
    maze = ["........T.","..........","....#..#..","........#.","..#......#","#...#.....",".........#",".#S.......","#.........","..##.#..#."]
    maze = [".......#.....#..#####.###..#.#..#.....##...","#..#......#.................#.....#.##....#","..#...........#........#.##.##.....#.#.....",".......####.#.........##.......#..#........",".#........#....##............#.......#.....","......##.......#.......#.#...#...##........","..#...#....#.....##...#...###....#.#..#....",".......#..#..........#...#...#####.......##","......#..#.#...#...........#....#....#..#..","....#....##...##..#........#.....#...#.....","#...........#....#.#.#..............#...##.","#.#.#..#T...##........####.#...#......#....","..###....##.#.....#........#...#....#..S.#.","..#......#.#...##.....##.#..#............##","#.....#.#...#.........#....##..#..#.#......","#..#..#.##.#.....##.......#......#...#...#.","##......#....#...##.#......#.##........##..",".......#..#...#......#......#.....#..#.....",".....#...#.##.##..........#..#..#...#..#...","....#...###..........#.###.#.##............","....#.##.#......##.#.....#...#.......#.#...",".....#.#.........#...#........#....#.#..#..",".....#.#......#..##..#........#....#.#.....",".....#........#.......#.#...#..............","#...##.##......#.....#.#.#.....#........#.#","........#.#....#..###.#.........#.......###","#....###.....##....#.#....#.#.#........#..#","....#...##....##..#....#..........##..#....","...#...........#..#.....#..#.#..#........#.","..##.#.......#.#.#..##.........#.#...##....",".##.#...##.##.#.##....#...##....#..........","##......##...#.#.....#..#..###.#....#....#.","............#.....#......##..#..###..#...#.",".......##...#..#...#......#.#..##...##...#.","#..##..##.............#.###.#..#.#.#..#.###","...#..#......##..#..#.........#.........#.#","......##.....#.....###.......#.#..#...#....","##.#.#...##..#.#.#...#.........#........###","....#.#.........#.#....####................","..##..##.....#...#...##......#.#.......#...","#.###....#..##....#.....#....####..#....#..",".#.......#........#....##..#...#..##.......","......#..........##...##..##.......#......."]
    print(sol.challengeOfTheKeeper(maze))