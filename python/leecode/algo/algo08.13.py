class Solution:
    def pileBox(self, box) -> int:
        n = len(box)
        if n == 0 : return 0
        if n == 1 : return box[0][2]

        dp = [0] * n
        box.sort()
        dp[0] = box[0][2]

        def findTop(inx:int):
            ret = []
            next = inx - 1
            while next >= 0:
                if box[inx][0]>box[next][0] and box[inx][1]>box[next][1] and box[inx][2]>box[next][2]:
                    ret.append(next)
                next -= 1
            return ret

        for i in range(1, n):
            dp[i] = box[i][2]
            tops = findTop(i)
            for next in tops :
                dp[i] = max(dp[i], dp[next] + box[i][2])
        return max(dp)

if __name__ == "__main__":
    sol = Solution()
    # box = [[9, 9, 10], [8, 10, 9], [9, 8, 10], [9, 8, 10], [10, 8, 8], [9, 8, 9], [9, 8, 8], [8, 9, 10], [10, 9, 10], [8, 8, 10], [10, 9, 10], [10, 9, 8], [8, 9, 9], [9, 10, 8], [8, 9, 9], [10, 10, 9], [8, 9, 10], [8, 10, 10], [8, 9, 10], [10, 10, 8], [10, 10, 9], [9, 10, 10], [10, 8, 9], [10, 10, 9], [8, 9, 10], [8, 8, 9], [8, 10, 10], [9, 9, 10], [10, 8, 8], [10, 10, 8], [8, 9, 9], [8, 9, 8], [10, 10, 8], [8, 10, 8], [10, 9, 10], [9, 9, 10], [9, 9, 9], [8, 9, 8], [9, 8, 8], [8, 9, 10], [10, 10, 8], [9, 9, 9], [10, 10, 10], [10, 9, 8], [9, 8, 9], [8, 8, 10], [8, 8, 8], [8, 8, 8], [8, 9, 10], [10, 9, 8], [8, 10, 8], [8, 10, 10], [9, 10, 10], [8, 8, 9], [9, 9, 9], [10, 8, 8], [8, 10, 10], [9, 10, 9], [9, 9, 8], [8, 10, 9], [9, 8, 8], [9, 9, 10], [9, 10, 10], [8, 8, 10]]
    # box = [[3, 1, 4], [10, 16, 15], [9, 10, 20], [8, 9, 8], [19, 7, 8], [10, 8, 2], [18, 16, 6], [8, 4, 9], [13, 1, 10], [18, 4, 6], [14, 8, 16], [13, 18, 2], [17, 10, 16], [4, 6, 6], [11, 17, 7], [1, 8, 7], [16, 10, 15], [18, 18, 4], [7, 2, 12], [1, 7, 3], [8, 5, 4], [15, 4, 9], [16, 7, 6], [12, 13, 20], [2, 4, 3], [12, 13, 20], [1, 2, 13], [16, 20, 11], [14, 4, 17], [16, 15, 8], [15, 18, 17], [4, 4, 8], [5, 18, 1], [16, 10, 10], [17, 19, 13], [18, 20, 13], [17, 5, 19], [5, 2, 17], [7, 13, 13], [9, 11, 12], [11, 10, 12], [10, 16, 5], [4, 3, 18], [18, 11, 18], [14, 14, 16], [18, 1, 14], [7, 5, 19], [10, 15, 11], [2, 11, 8], [6, 8, 17], [12, 1, 12], [8, 4, 17], [13, 14, 11], [17, 20, 11], [15, 10, 15], [7, 6, 19], [14, 13, 15], [11, 9, 12], [19, 14, 2], [14, 11, 8], [4, 2, 18], [12, 20, 15], [2, 12, 18], [16, 6, 9]]
    import random
    from datetime import datetime
    box = [[random.randint(1,1000), random.randint(1,1000), random.randint(1,1000)] for _ in range(10 ** 3)]
    
    begin = datetime.now()
    print(sol.pileBox(box))
    print((datetime.now()- begin).total_seconds())

